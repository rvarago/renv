#!/usr/bin/env bash

# A manager of my computing environment.

set -eu

THIS_DIR="${PWD}"
THIS_SCRIPT=$(basename "${BASH_SOURCE[0]}")

NIXPKGS="${THIS_DIR}/nixpkgs"
SCRIPTS="${THIS_DIR}/scripts/include"

log() {
  echo >&2 "[${THIS_SCRIPT}] " "$@"
}

usage() {
  cat <<EOF
Manage my computing environment

USAGE:
  ${THIS_SCRIPT} [OPTION] COMMAND

OPTION:
  -h                      Show this message

COMMAND:
  check-deps              Check whether all required pre-conditions (e.g dependencies) hold
  home                    Install packages with home-manager
  home-manager            Install home-manage (imperative)
  lean                    Install Lean toolchains managed by Elan (imperative)
  nix                     Install nix (imperative)
  nix-update              Update nix (imperative)
  ocaml                   Install OCaml toolchains (imperative)
  prune                   Prune old generations and collect relevant garbage
  rust                    Install Rust toolchains managed by Rustup (imperative)
  vscode                  Re-generate VSCode market extensions manifest
EOF
}

command=""

parse_args() {
  while getopts "h" opt; do
    case "${opt}" in
    h)
      usage
      exit 0
      ;;
    *)
      log "Please, provide a valid option other than '${opt}'"
      exit 64
      ;;
    esac
  done

  shift $((OPTIND - 1))

  if [[ $# -ne 1 ]]; then
    log "Please, provide some command"
    exit 64
  fi

  command="$1"
}

command_exists() {
  local command="$1"

  if [ "$(command -v "${command}")" ]; then
    log "${command}: Found"
    return 0
  else
    log "${command}: Not found in PATH"
    return 1
  fi
}

check_deps() {
  log "Checking dependencies"

  command_exists "curl" || exit 66
}

home() {
  local source="${NIXPKGS}"
  local target="${HOME}/.config"

  if [[ ! -d "${source}" ]]; then
    echo "Please, check whether '${source}' actually exists"
    exit 66
  fi

  log "Instaling '${source}' to '${target}'"

  mkdir -p "${target}"
  ln -sf "${source}" "${target}"

  log "Switching home-manager"

  home-manager switch
}

nix() {
  if ! command_exists "nix-shell"; then
    log "Installing nix"

    curl -L https://nixos.org/nix/install | sh

    log "nix installed, please reboot"
  else
    log "nix alredy installed"
  fi
}

home_manager() {
  if ! command_exists "home-manager"; then
    log "Installing home-manager"

    nix-shell '<home-manager>' -A install
  else
    log "home-manager already installed"
  fi
}

lean() {
  log "Installing Lean utilities"

  elan update
  elan toolchain install leanprover/lean4:nightly
  elan default leanprover/lean4:nightly
}

nix_update() {
  log "Updating nix"

  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager

  nix-channel --update
}

ocaml() {
  log "Installing OCaml utilities"

  [[ ! -d "$HOME/.opam" ]] && opam init

  opam update
  # opam switch create 4.13.1
  opam install dune ocamlformat utop ocaml-lsp-server
}

prune() {
  local generations_to_keep=3

  log "Pruning old generations and collecting garbage"

  home-manager generations |
    awk -v max="${generations_to_keep}" 'NR > max {print $5}' |
    xargs home-manager remove-generations

  nix-collect-garbage
}

rust() {
  log "Installing Rust utilities"

  rustup default stable
  rustup update
  rustup component add \
    rust-src
  rustup toolchain install nightly
}

vscode() {
  log "Re-generating VSCode market extensions manifest"

  "${SCRIPTS}/vscode/generate_market_extensions"
}

handle() {
  local command="$1"

  case "${command}" in
  "check-deps")
    check_deps
    ;;
  "home")
    home
    ;;
  "lean")
    lean
    ;;
  "home-manager")
    home_manager
    ;;
  "nix")
    nix
    ;;
  "nix-update")
    nix_update
    ;;
  "ocaml")
    ocaml
    ;;
  "prune")
    prune
    ;;
  "rust")
    rust
    ;;
  "vscode")
    vscode
    ;;
  *)
    log "Please, provide a valid command other than '${command}'"
    exit 64
    ;;
  esac
}

main() {
  parse_args "$@"

  handle "${command}"

  log "Done"
}

main "$@"
