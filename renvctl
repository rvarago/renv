#!/usr/bin/env bash

# A manager of my computing environment.

set -eu

THIS_DIR="${PWD}"
THIS_SCRIPT=$(basename "${BASH_SOURCE[0]}")

SCRIPTS="${THIS_DIR}/scripts/include"

_log() {
  echo >&2 "[${THIS_SCRIPT}] " "$@"
}

_usage() {
  cat <<EOF
Manage my computing environment

USAGE:
  ${THIS_SCRIPT} COMMAND

COMMAND:
  help               Show this message
  check              Check whether all required pre-conditions (e.g dependencies) hold
  nix:install        Install nix
  nix:cache:install  Install binary cache
  nix:update         Update nix
  nix:prune          Prune old generations and collect relevant garbage
  deb:install        Install dependencies on a Debian-based distro
  deb:upgrade        Upgrade components installed on a Debian-based distro
  home:apply         Install packages with home-manager
  ocaml:install      Install OCaml toolchains
  lean:install       Install Lean toolchains managed by Elan
  rust:install       Install Rust toolchains managed by Rustup
  vscode:generate    Re-generate VSCode market extensions manifest
EOF
}

_command_exists() {
  local command="$1"

  if [ "$(command -v "${command}")" ]; then
    _log "${command}: Found"
    return 0
  else
    _log "${command}: Not found in PATH"
    return 1
  fi
}

_nix_enable_features() {
  local config_dir="${HOME}/.config/nix"
  local config_file="${config_dir}/nix.conf"

  mkdir -p "${config_dir}"
  echo -e "# This file was auto-generated by: \"${THIS_SCRIPT}\".\n experimental-features = nix-command flakes" >>"${config_file}"
}

_niv() {
  nix-shell --run "niv $1"
}

_home_manager() {
  nix-shell --run "home-manager $1"
}

export -f _home_manager

check() {
  _log "Checking dependencies"

  _command_exists "curl" || exit 66
}

nix:install() {
  if ! _command_exists "nix"; then
    _log "Installing nix"

    curl -L https://nixos.org/nix/install | sh

    _nix_enable_features

    _log "Nix installed, please reboot"
  else
    _log "Nix already installed"
  fi
}

nix:cache:install() {
  _log "Setting up cache"

  nix-env -iA cachix -f https://cachix.org/api/v1/install

  cachix use nix-community
}

nix:update() {
  _log "Updating nix"

  _niv update
}

nix:prune() {
  local generations_to_keep=5

  _log "Pruning old generations and collecting garbage"

  _home_manager generations |
    awk -v max="${generations_to_keep}" 'NR > max {print $5}' |
    xargs "$BASH" -c "_home_manager remove-generations"

  nix-collect-garbage
}

deb:install() {
  if _command_exists "apt-get"; then
    _log "Installing components on Debian-based distro"

    apt-get install -y \
      build-essential \
      make \
      nmap \
      strace
  else
    _log "You might not be on a Debian-based distro"
  fi
}

deb:upgrade() {
  if _command_exists "apt-get"; then
    _log "Upgrading components on Debian-based distro"

    apt-get update && apt-get upgrade -y
  else
    _log "You might not be on a Debian-based distro"
  fi
}

home:apply() {
  _log "Switching home-manager"

  _home_manager switch
}

ocaml:install() {
  _log "Installing OCaml utilities"

  [[ ! -d "$HOME/.opam" ]] && opam init

  opam update
  # opam switch create 4.13.1
  opam install dune ocamlformat utop ocaml-lsp-server
}

lean:install() {
  _log "Installing Lean utilities"

  elan update
  elan toolchain install leanprover/lean4:nightly
  elan default leanprover/lean4:nightly
}

rust:install() {
  _log "Installing Rust utilities"

  rustup default stable
  rustup update
  rustup component add \
    rust-src
  rustup toolchain install nightly
}

vscode:generate() {
  _log "Re-generating VSCode market extensions manifest"

  "${SCRIPTS}/vscode/generate_market_extensions"
}

help() {
  _usage
}

_main() {
  TIMEFORMAT=$'\nCommand completed in %3lR'
  time "${@:-help}"

  _log "Done"
}

_main "$@"
