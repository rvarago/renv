#!/usr/bin/env bash

# A manager of my computing environment.

set -eu

THIS_DIR="${PWD}"
THIS_SCRIPT=$(basename "${BASH_SOURCE[0]}")

SCRIPTS="${THIS_DIR}/scripts/include"

USERS="${THIS_DIR}/nixpkgs/users"

_out() {
  echo "[${THIS_SCRIPT}] " "$@"
}

_log() {
  _out >&2 "$@"
}

_usage() {
  cat <<EOF
Manage Rafael's computing environment

USAGE:
  ${THIS_SCRIPT} COMMAND

COMMAND:
  help                Show this message

  system:install     Install system packages

  system:sync         Upgrade system-wide packages
  home:sync           Sync home packages, dotfiles, etc
  ext:sync            Upgrade external packages

  vscode:sync         Install/Upgrade VSCode, config, and extensions

  ocaml:sync          Install/Upgrade OCaml toolchains
  lean:sync           Install/Upgrade Lean toolchains managed by Elan
  rust:sync           Install/Upgrade Rust toolchains managed by Rustup
EOF
}

_command_exists() {
  local command="$1"

  if [ "$(command -v "${command}")" ]; then
    _log "${command}: Found"
    return 0
  else
    _log "${command}: Not found in PATH"
    return 1
  fi
}

_as_sudo() {
  if [[ "${EUID}" != 0 ]]; then
    sudo "$0" "$@"
  else
    "$0" "$@"
  fi
}

_exec_on_yes() {
  local msg="$1"
  while true; do
    read -rp "${msg}: " yn
    case $yn in
    [Yy]*)
      "${@:2}"
      break
      ;;
    [Nn]*) break ;;
    *) echo "Please answer yes or no." ;;
    esac
  done
}
_niv() {
  nix-shell --run "niv $1"
}

_home_manager() {
  nix-shell --run "home-manager $1"
}

export -f _home_manager

_home_configure() {
  local templateuser="rvarago"
  local newuser="${USER}"
  local newuserfile="${USERS}/${newuser}.nix"

  _log "Configuring home-manager for user ${newuser} at ${newuserfile}"

  if [ ! -f "${newuserfile}" ]; then
    cp "${USERS}/${templateuser}.nix" "${newuserfile}"

    _log "Patching files (please check them afterwards):"

    grep -rl "${templateuser}" --include "*.nix" . |
      tee /dev/tty |
      xargs sed -i "s/${templateuser}/${newuser}/g"
  fi
}

_home_ephemeral_customise() {
  _log "Creating ephemeral (git-ignored) customisation file"

  local ephemeral="./nixpkgs/modules/ephemeral.nix"

  if [ ! -f "${ephemeral}" ]; then
    cat >"${ephemeral}" <<EOF
{ pkgs, ... }:
{

  home.packages = [
    # pkgs.hello
  ];
}
EOF
    _out "Have fun hacking ${ephemeral}"
  else
    _out "Customisation file already there at {$ephemeral}"
  fi
}

_deb_install() {
  if _command_exists "apt-get"; then
    _log "Installing components on Debian-like"

    _as_sudo apt-get install -y \
      curl \
      build-essential \
      make \
      nmap \
      strace
  else
    _log "This isn't Debian-like"
  fi
}

_nix_enable_features() {
  local config_dir="${HOME}/.config/nix"
  local config_file="${config_dir}/nix.conf"

  mkdir -p "${config_dir}"
  echo -e "# This file was auto-generated by: \"${THIS_SCRIPT}\".\n experimental-features = nix-command flakes" >>"${config_file}"
}

_nix_install() {
  if ! _command_exists "nix"; then
    _log "Installing nix"

    sh <(curl -L https://nixos.org/nix/install) --no-daemon

    _nix_enable_features

    _log "Nix installed"

    _exec_on_yes "Press any to reboot (remember to run system:install2 afterwards)" _as_sudo reboot
  else
    _log "Nix already installed"
  fi
}

_cachix_install() {
  _log "Installing cache"

  nix-env -iA cachix -f https://cachix.org/api/v1/install

  cachix use nix-community
}

_deb_upgrade() {
  if _command_exists "apt-get"; then
    _log "Upgrading components on Debian-based distro"

    _as_sudo apt-get update
    _as_sudo apt-get -y upgrade
    _as_sudo apt-get -y autoremove
  else
    _log "You might not be on a Debian-based distro"
  fi
}

_nix_upgrade() {
  _log "Updating nix"
  nix-channel --update
  nix-env --install --attr nixpkgs.nix nixpkgs.cacert
  _niv update
}

_nix_prune() {
  local generations_to_keep=5

  _log "Pruning old generations and collecting garbage"

  _home_manager generations |
    awk -v max="${generations_to_keep}" 'NR > max {print $5}' |
    xargs "$BASH" -c "_home_manager remove-generations"

  nix-collect-garbage
}

_load_hm_vars() {
  echo >>"/home/$USER/.profile" \
    ". $HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"
}

_set_fish_as_default() {
  echo "/home/$USER/.nix-profile/bin/fish" | _as_sudo tee -a "/etc/shells"

  _as_sudo chsh -s "/home/$USER/.nix-profile/bin/fish" "$USER"
}

system:install() {
  _home_configure
  _home_ephemeral_customise
  _deb_install
  _nix_install

  #shellcheck disable=SC1091
  . "$HOME/.nix-profile/etc/profile.d/nix.sh"

  _nix_upgrade
  _cachix_install

  _home_manager switch

  _load_hm_vars
  _set_fish_as_default

  _exec_on_yes "Press any to reboot (you're done afterwards)" _as_sudo reboot
}

system:sync() {
  _nix_upgrade
  _deb_upgrade

  _nix_prune
}

ext:sync() {
  _command_exists "code" && vscode:sync

  _command_exists "elan" && lean:sync
  _command_exists "opam" && ocaml:sync
  _command_exists "rustup" && rust:sync
}

home:sync() {
  _log "Switching home-manager"

  _home_manager switch
}

vscode:sync() {
  _log "Installing/Upgrading VSCode with extensions"

  "${SCRIPTS}/vscode/install"
}

lean:sync() {
  _log "Installing/Upgrading Lean utilities"

  if ! command -v elan; then
    curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- -y
    # shellcheck disable=SC1090
    . ~/.profile
  fi

  elan update
  elan toolchain install leanprover/lean4:nightly
  elan default leanprover/lean4:nightly
}

ocaml:sync() {
  _log "Installing/Upgrading OCaml utilities"

  [[ ! -d "$HOME/.opam" ]] && opam init

  opam update
  # opam switch create 4.13.1
  opam install dune ocamlformat utop ocaml-lsp-server
}

rust:sync() {
  _log "Installing/Upgrading Rust utilities"

  command -v rustup || (curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y)
  rustup default stable
  rustup update
  rustup component add \
    rust-src
  rustup toolchain install nightly --allow-downgrade -c rustfmt
}

help() {
  _usage
}

_main() {
  TIMEFORMAT=$'\nCommand completed in %3lR'
  time "${@:-help}"

  _log "Done"
}

_main "$@"
